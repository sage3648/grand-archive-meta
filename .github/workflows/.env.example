# GitHub Secrets Template
# Copy these to GitHub Settings → Secrets and variables → Actions

# ============================================
# AWS Configuration
# ============================================

# AWS region where your infrastructure is deployed
AWS_REGION=us-east-1

# Your AWS account ID (12-digit number)
# Find it: AWS Console → Account dropdown (top right)
AWS_ACCOUNT_ID=123456789012

# IAM Role ARN for GitHub Actions OIDC authentication
# Format: arn:aws:iam::ACCOUNT_ID:role/ROLE_NAME
# This role should have permissions for EC2 and S3
AWS_ROLE_ARN=arn:aws:iam::123456789012:role/github-actions-grand-archive

# S3 bucket name for Terraform state storage
# Must be globally unique
# Example: grand-archive-terraform-state-abc123
TF_STATE_BUCKET=grand-archive-terraform-state-YOUR-UNIQUE-ID

# ============================================
# EC2 Configuration
# ============================================

# EC2 instance public DNS or IP address
# Find it: EC2 Console → Instances → Select instance → Public IPv4 DNS
# Format: ec2-X-X-X-X.compute-1.amazonaws.com or X.X.X.X
EC2_HOST=ec2-1-2-3-4.compute-1.amazonaws.com

# SSH private key for accessing EC2 instance
# Generate: ssh-keygen -t ed25519 -C "github-actions" -f github-actions-key
# Add public key to EC2: echo "PUBLIC_KEY" >> ~/.ssh/authorized_keys
# Paste entire private key file contents (including BEGIN/END lines)
EC2_PRIVATE_KEY=-----BEGIN OPENSSH PRIVATE KEY-----
b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAMwAAAAtzc2gtZW
...
(paste full private key here)
...
-----END OPENSSH PRIVATE KEY-----

# ============================================
# Database Configuration
# ============================================

# MongoDB connection string
# MongoDB Atlas: Cluster → Connect → Connect your application
# Format: mongodb+srv://username:password@cluster.mongodb.net/database?retryWrites=true&w=majority
MONGODB_URI=mongodb+srv://username:password@cluster.mongodb.net/grand-archive?retryWrites=true&w=majority

# ============================================
# Optional Secrets
# ============================================

# API server port (default: 8080)
# PORT=8080

# Rust logging level (default: info)
# Options: trace, debug, info, warn, error
# RUST_LOG=info

# Application environment (default: production)
# ENVIRONMENT=production

# ============================================
# Vercel Configuration (set in Vercel dashboard)
# ============================================

# Backend API URL for frontend
# Set in: Vercel → Project → Settings → Environment Variables
# NEXT_PUBLIC_API_URL=https://api.yourapp.com

# ============================================
# How to Set Secrets
# ============================================

# Method 1: Using GitHub CLI (recommended)
# ========================================
# gh secret set AWS_REGION -b "us-east-1"
# gh secret set AWS_ACCOUNT_ID -b "123456789012"
# gh secret set AWS_ROLE_ARN -b "arn:aws:iam::123456789012:role/github-actions"
# gh secret set TF_STATE_BUCKET -b "grand-archive-terraform-state-abc123"
# gh secret set EC2_HOST -b "ec2-1-2-3-4.compute-1.amazonaws.com"
# gh secret set EC2_PRIVATE_KEY < path/to/private-key
# gh secret set MONGODB_URI -b "mongodb+srv://..."

# Method 2: Using GitHub Web UI
# ==============================
# 1. Go to your repository on GitHub
# 2. Settings → Secrets and variables → Actions
# 3. Click "New repository secret"
# 4. Enter name and value for each secret
# 5. Click "Add secret"

# Method 3: Using GitHub API
# ==========================
# See: https://docs.github.com/en/rest/actions/secrets

# ============================================
# Security Notes
# ============================================

# 1. NEVER commit this file with real values
# 2. Add .env* to .gitignore
# 3. Rotate secrets regularly (every 90 days)
# 4. Use least-privilege IAM policies
# 5. Enable MFA on AWS account
# 6. Use GitHub environment protection rules
# 7. Review secret access in audit logs
# 8. Use different credentials for production/staging

# ============================================
# Validation Checklist
# ============================================

# Before deploying, verify:
# [ ] AWS_ROLE_ARN is correct and role exists
# [ ] EC2_HOST is reachable from GitHub Actions
# [ ] SSH key matches the public key on EC2
# [ ] MongoDB URI is valid and database is accessible
# [ ] S3 bucket for Terraform state exists
# [ ] All secrets are set in GitHub (not just copied here)
# [ ] IAM role has necessary permissions
# [ ] EC2 security group allows SSH access
# [ ] Production environment is configured in GitHub

# ============================================
# Testing Secrets
# ============================================

# Test AWS credentials:
# aws sts get-caller-identity --region $AWS_REGION

# Test EC2 SSH:
# ssh -i path/to/private-key ubuntu@$EC2_HOST

# Test MongoDB connection:
# mongosh "$MONGODB_URI" --eval "db.adminCommand('ping')"

# Test S3 access:
# aws s3 ls s3://$TF_STATE_BUCKET
